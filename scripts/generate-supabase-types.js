const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

async function main() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const key = process.env.SUPABASE_SERVICE_ROLE_KEY;
  if (!url || !key) {
    console.error('Missing NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
  }

  const supabase = createClient(url, key);

  // Tables to introspect - we can fetch from diagnostics RPC or use common list
  const tables = ['profiles', 'accounts', 'transactions', 'kyc_submissions'];

  console.log('Calling RPC get_table_columns for tables:', tables.join(','));
  const rpc = await supabase.rpc('get_table_columns', { table_names: tables });
  if (rpc.error) {
    console.error('RPC get_table_columns failed:', rpc.error.message || rpc.error);
    process.exit(1);
  }

  const cols = Array.isArray(rpc.data) ? rpc.data : [];

  const byTable = {};
  for (const c of cols) {
    const t = c.table_name;
    if (!byTable[t]) byTable[t] = [];
    byTable[t].push(c);
  }

  function mapType(pg) {
    if (!pg) return 'any';
    const p = pg.toLowerCase();
    if (p.includes('char') || p === 'text' || p === 'uuid' || p.includes('json') || p.includes('time') || p === 'date') return 'string';
    if (p.includes('int') || p === 'numeric' || p === 'double precision' || p === 'real' || p === 'decimal') return 'number';
    if (p === 'boolean' || p === 'bool') return 'boolean';
    return 'any';
  }

  let out = "// This file is generated by scripts/generate-supabase-types.js\n";
  out += "// Do not edit directly. Run the generation script to update.\n\n";
  out += "export namespace Database {\\n  export namespace public {\\n    export interface Tables {\\n";

  for (const table of Object.keys(byTable)) {
    const columns = byTable[table];
    out += `      ${table}: {\n        Row: {\n`;
    for (const col of columns) {
      const tsType = mapType(col.data_type);
      const optional = col.is_nullable === 'YES' ? ' | null' : '';
      out += `          ${col.column_name}: ${tsType}${optional};\n`;
    }
    out += '        };\n        Insert: Partial<Row>;\n        Update: Partial<Row>;\n      }\n';
  }

  out += '    }\n  }\n}\n';

  const targetDir = path.join(process.cwd(), 'types');
  if (!fs.existsSync(targetDir)) fs.mkdirSync(targetDir);
  const target = path.join(targetDir, 'supabase.ts');
  fs.writeFileSync(target, out, 'utf8');
  console.log('Wrote types to', target);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
